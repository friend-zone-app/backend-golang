scalar Time
scalar ObjectID

directive @isAuthenticated on FIELD_DEFINITION
directive @atTheEvent on FIELD_DEFINITION

"""user"""
type User {
  _id: ObjectID!
  displayName: String!
  username: String!
  email: String!
  biography: String
  avatar: String
  createdAt: Time!
  events: [ObjectID!]
  posts: [ObjectID!]
  friendsReq: [FriendReq!]
  friendList: [ObjectID!]
  badges: [Badge!]
  level: Int!
  setting: Setting!
}

type Badge {
  _id: ObjectID!
  type: BadgeType!
  value: String
  enabled: Boolean!
  focused: Boolean!
}

type FriendReq {
  createdAt: Time!
  status: Boolean!
  user: ObjectID!
}

type Setting {
  privacy: Privacy!
  colorMode: ColorMode!
  eventAutomation: [EventAutomation!]
}

type Privacy {
  shareLocation: UserPrivacy!
  reactionOnPost: UserPrivacy!
  joinPost: UserPrivacy!
  friendRequest: UserPrivacy!
}

type EventAutomation {
  _id: ObjectID!
  title: String!
  location: Point!
  description: String!
  startsAt: Time!
  endsAt: Time
  createdAt: Time!
  inviters: [Invite!]
  repeat: [WeekDays!]
}

enum BadgeType {
  SPECIAL
  ROLE
  DAILY
}

enum ColorMode {
  LIGHT
  DARK
}

enum UserPrivacy {
  FRIENDS
  EVERYONE
  NOBODY
}

enum WeekDays {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURSDAY
  SUNDAY
}

"""Tokens"""
type Tokens {
  accessToken: String!
  refreshToken: String!
}

type UserRes {
  user: User!
  token: Tokens!
}

type Query {
  getUserById(_id: String!): User! @isAuthenticated()
  getUserByName(username: String!): User! @isAuthenticated()
  me: User! @isAuthenticated()
  requestLogin(email: String!): Boolean!
  logout: Boolean! @isAuthenticated()
  getLocationDataByAddress(address: String!): Location! @isAuthenticated()
  getLocationDataByPoint(lat: String!, long: String!): Location! @isAuthenticated()
  getUserEvents(userId: String!): [Event]! @isAuthenticated()
  getUserEventById(userId: String!, id: String!): Event! @isAuthenticated()
  getLocalEvent(lat: String!, long: String!): [Event]! @isAuthenticated()
  getEvent(id: String!): Event! @isAuthenticated() @atTheEvent()
}

type Mutation {
  updateUser(updateUser: UpdateUserArgs!): Boolean! @isAuthenticated()
  validateOtp(code: String!, email: String!, username: String!, setting: SettingInput): UserRes!
  refreshToken: Tokens!
  addAutomation(automation: AddAutomationInput!): Boolean! @isAuthenticated()
  removeAutomation(automation: RemoveAutomationInput!): Boolean! @isAuthenticated()
  updateSetting(setting: UpdateSettingInput!): Boolean! @isAuthenticated()
  updatePost(updatePost: UpdatePostInput!): Boolean! @isAuthenticated()
  removePost(removePost: RemovePostInput!): Boolean! @isAuthenticated()
  createPost(createPost: CreatePostInput!): Boolean! @isAuthenticated()
  addReaction(postId: String!, reactionType: ReactionTypeInput!): Boolean! @isAuthenticated()
  createEvent(createEvent: CreateEventInput!): Event! @isAuthenticated()
  removeEvent(removeEvent: RemoveEventInput!): Boolean! @isAuthenticated()
  updateEvent(updateEvent: UpdateEventInput!): Event! @isAuthenticated()
  addBadge(badge: AddBadgeInput!): Boolean! @isAuthenticated()
  updateBadge(badge: UpdateBadgeInput!): Boolean! @isAuthenticated()
}

input UpdateUserArgs {
  query: String!
  username: String
  password: String
  email: String
  biography: String
  avatar: String
  refreshToken: String
}

input SettingInput {
  privacy: PrivacyInput
  colorMode: ColorMode
}

input PrivacyInput {
  shareLocation: UserPrivacy
  reactionOnPost: UserPrivacy
  joinPost: UserPrivacy
  friendRequest: UserPrivacy
}

input AddAutomationInput {
  title: String!
  location: [Float]!
  description: String!
  startsAt: Time!
  endsAt: Time
  createdAt: Time!
  inviters: [InviteInput!]
  repeat: [WeekDays!]
}

input RemoveAutomationInput {
  inputId: String!
}

input UpdateSettingInput {
  privacy: PrivacyInput
  colorMode: ColorMode
}

input AddBadgeInput {
  type: BadgeType!
  value: String
  enabled: Boolean!
}

input UpdateBadgeInput {
  query: String!
  value: String
  enabled: Boolean
}